---
title: "Exploratory Analysis: StandyBy Data"
author: "Georg Grunsky"
format: pdf
editor: visual
---

## Reading the Data

Two files provided: sickness_table.csv and sickness_table.xlsx Files are apparently the same. Needs to be checked:

Reading the csv-file

```{r}
require(readr)
sickness_csv <- read_csv("C:/Users/ChSnsMgt/iCloudDrive/DLMDWME01/01_data/01_lake/01_use_case_2/sickness_table.csv", 
    col_types = cols(date = col_datetime(format = "%Y-%m-%d")))
head(sickness_csv)
```

Reading the excel-file

```{r}
require(readxl)
sickness_xls <- read_excel("C:/Users/ChSnsMgt/iCloudDrive/DLMDWME01/01_data/01_lake/01_use_case_2/sickness_table.xlsx", 
    col_types = c("numeric", "date", "numeric", 
        "numeric", "numeric", "numeric", "numeric", 
        "numeric"))
head(sickness_xls)
```

Identical check

```{r}
identical(sickness_csv, sickness_xls)
```

Quick identical check says false. Datastructure and Datasummary will be run on both datasets for detailed comparison.

## Datastructure

Print out data structure

```{r}
print("sickness_csv:")
str(sickness_csv)
print("-----------------------------")
print("sickness_xls:")
str(sickness_xls)
```

## Data Summary

Run base package summary on both data sets

```{r}
#| echo: false
print("sickness_csv:")
summary(sickness_csv)
print("-----------------------------")
print("sickness_xls:")
summary(sickness_xls)
```

Conclusion: Obviously the data sets are identical. In further exploration only the csv will be used. From the summary one can read that constant 90 n_sby is to much in most cases compared with sby_need but there are occasions where more than that is needed.

## Overview variables

```{r}
plot(sickness_csv)
```

Conclusion: sby_need (the predicted variable) is apparently mostly depended on the number of calls, (which makes sense) and on dafted personnel (which will be ignored because that is to be avoided).
A hint of dependency is also recognizable between the variables sby_need, calls and n_sick and the variable date, which could acknowledge the alleged seasonality of the data.
It is advisable to shift the focus to these features.

## Focus on specific variables

```{r}
plot(sickness_csv[,c(2:4,7)])
```
In this figure, it seems even more clearly that the date has an influence on the other three variables. Let's therefore generate some more features out of the date variable to see if it is possible to be more specific about this fact. The shown figures analyse the three variables in comparison to the new features.

```{r}
require(lubridate)
require(dbplyr)
sick <- sickness_csv[,c(2:4,7)]
sick <- sick %>% dplyr::mutate(year = lubridate::year(date),
                        month = lubridate::month(date),
                        week = lubridate::week(date),
                        wday = lubridate::wday(date))
plot(sick[,c(4:8)])
plot(sick[,c(2,5:8)])
plot(sick[,c(3,5:8)])
```
Regarding the figures all three variables in question are mostly affected by the month and the week features. Let's get into more detail on this.

```{r}
require(ggplot2)
require(plotly)
require(data.table)
require(reshape2)

# reshape tables
week <- reshape2::melt(sick[,c(2,4,7)], id.vars = "week") %>% 
  dplyr::group_by(week, variable) %>%
  dplyr::summarise(n = sum(value))

p_week <- ggplot(data = week) +
  geom_line(aes(x = week, y = n, colour = variable))

ggplotly(p_week)

```



## Look for NAs and missing dates
