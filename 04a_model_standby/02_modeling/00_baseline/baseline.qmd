---
title: "Baseline Modelling"
author: "Georg Grunsky"
editor: visual
bibliography: references.bib
---

```{r}
#| label: load packages
#| message: false
#| warning: false
#| include: false

require(dplyr)
require(fpp3)
```

## Prämisse

### Use Case Analyse {#sec-use-case-analyse}

In der vorausgegangenen Use Case Analyse [@grunsky_rettungsdienst_2024] wurden bereits Überlegungen zu Modellansätzen sowie der Bewertung dieser angestellt. Diese wurden, vor allem, in den Abschnitten **Building Models** und **Impact Simulation** behandelt. Die Erkenntnisse werden nachfolgend nochmals zusammengefasst:

In der Use Case Analyse wurden die überblicksmäßig die Stärken und Schwächen verschiedener Machine Learning Algorithmen verglichen. Aufgrund der Einfachheit, Interpretierbarkeit und Tauglichkeit für saisonale Zeitreihen mit wenig Features schienen die Modelle SARIMA und Facebook Prophet den Anforderungen dieses Anwendungsfalles entgegenzukommen.

**SARIMA** (Seasonal Autoregressive Integrated Moving Average) stellt dabei ein klassisches Modell für saisonale Zeitreihenanalysen dar. **Facebook Prophet** wurde ebenso für Zeitreihenvorhersagen entwickelt und verwendet dabei ein zusammengesetztes Modell aus Trend, Saisonalität und speziellen Ereignissen in Zeitreihen. [@taylor_forecasting_2017].

Eine weitere, sehr "schlanke", aber nicht so fein skalierbare Methode für die Vorhersage saisonaler Daten stellt **SNAIVE** (Seasonal Naive Model) dar. Dieser Algorithmus .... eignet sich daher für ein Baseline Model ...

Auf Basis des DRK-Reformtarifvertrags [@deutsches_rotes_kreuz_drk-reformtarifvertrag_2023] wurde geschätzt, dass ein Tag mit, bisher fix eingeteilten, 90 Bereitschaftsfahrer:innen etwa €14.850,- kostet (€165,- pro Bereitschaftsfahrer:in), die an vielen Tagen gar nicht abgerufen werden. Diese Kosten können gut als Messwerte in eine Kostenfunktion für die Güte des Modells integriert werden. Ein deutlich höherer Strafbetrag für eine zu niedrige Schätzung soll den Anforderungen des K.O.-Kriteriums entsprechen, nie zu wenig Bereitschaftspersonal vorzusehen.

### Explorative Datenanalyse

Die Erkenntnisse der explorativen Datenanalyse bieten eine weitere Basis für die Erstellung eines Baseline Models und lassen sich wie folgt zusammenfassen:

1.  Beim Bedarf an StandBy-Personal wurde über die Jahre ein positiver Trend mit einem starken Anstieg seit Beginn des Jahres 2019 beobachtet.
2.  Ebenso wurde eine
    1.  starke wochenweise Saisonalität mit Perioden zw. 3-5 Wochen,
    2.  eine Abhängigkeit zum Tag im Monat mit einem starken Abwärtstrend zu Beginn jeden Monats und Periodenlängen von etwa drei Tagen,
    3.  sowie eine schwächer ausgeprägte monatliche Saisonalität festgestellt.
3.  Es wurde außerdem festgehalten, dass eine Abhängigkeit des Bedarfs an StandBy-Personal von der Anzahl krankgemeldeter Bereitschaftsfahrer:innen und der Anzahl eingehender Notrufe plausibel scheint. In der wochenweisen Aggregation der Daten bestätigte das neu entstandene Merkmal call_per_sick (eine Division der Anzahl der Notrufe durch die Anzahl der Krankmeldungen) diese Annahme. Dies wurde vor allem in der logarithmischen Darstellung der Daten ersichtlich.

Die möglichen Prediktoren aus dem letzten Punkt müssten für eine Verwendung als solche selbst erst einzeln vorhergesagt und danach zusammengeführt werden. Ein direktes Lernen der zeitlichen Muster der abhängigen Variable scheint an dieser Stelle für ein Baseline Model effizienter. Die ersten beiden Punkte weisen auf eine Kombination aus Trends und unterschiedlichen Saisonalitäten hin, die in einer Vorhersage berücksichtigt werden muss. Die Verwendung von dem oben beschriebenen Facebook Prophet Alorithmus für ein Baseline Model scheint den Anforderungen zu entsprechen.

## Baseline Model mit SNAIVE

SNAIVE und fable

## Baseline Models

Buchreferenz, Auswahl

### Kostenfunktion

Wie bereits in @sec-use-case-analyse beschrieben, nimmt die unten angeführte Kostenfunktion Bezug auf entstandene (jedoch nicht abgerufene) StandBy-Kosten, sowie Strafkosten für zu niedrige Vorhersagen. Die Werte werden zum Vergleich über die Testperiode aufsummiert.

# Daten laden

```{r}

```

```{r}
# Kreuzvalidierung
cv <- ts_sby %>%
  stretch_tsibble(.init = 121, .step = 31)
```

```{r}
#| echo: true
#| message: false
#| warning: false
# Training

system.time(
  progressr::with_progress(
    sby_basemodel <- ts_sby %>%
      mutate(
        MA8 = slider::slide_dbl(sby_need, mean,
                                .before = 3, .after = 4, .complete = TRUE),
        MA2_8 = slider::slide_dbl(MA8, mean,
                                  .before = 1, .after = 0, .complete = TRUE)
        ) %>%
      filter(date < "2018-12-01") %>%
      model(
        snaive = SNAIVE(MA2_8, lag = 121),
        ets = ETS(MA2_8 ~ error("A") + trend("A") + season("M")),
        drift = RW(MA2_8 ~ drift()),
        arima = ARIMA(MA2_8 ~ fourier(K = 3) + pdq()),
        tslm = TSLM(MA2_8 ~ trend() + season()),
        mean = MEAN(MA2_8)
      ) 
  )
)
```

```{r}
#| echo: true
#| message: false
#| warning: false
# Vorhersage
system.time(
  progressr::with_progress(
    sby_basefc <- sby_basemodel %>%
      forecast(h = "2 years", level = c(95))
  )
)
```

```{r}
#| echo: true
#| message: false
#| warning: false
require(plotly)

p <- ts_sby %>%
  filter(date >= "2018-12-01") %>%
  autoplot(sby_need, colour = "red") +
  autolayer(sby_basefc, alpha = 0.3) +
  labs(y = "Anrufe",
       title = "Vorhersage")

ggplotly(p)


```

```{r}
#| echo: true
#| message: false
#| warning: false
# Training
decomp_spec <- decomposition_model(
  STL(calls ~ trend(window = 121) +
          season(period = "1 year", window = 121)),
  RW(season_adjust ~ drift())
)

system.time(
  progressr::with_progress(
    sby_basemodel <- ts_sby %>%
      filter(date < "2018-12-01") %>%
      model(
        stlf = decomp_spec,
        snaive = SNAIVE(calls, lag = 121),
        ets = ETS(calls ~ error("A") + trend("A") + season("A")),
        drift = RW(calls ~ drift()),
        arima = ARIMA(calls ~ fourier(K = 2))
      )
  )
)
```

```{r}
#| echo: true
#| message: false
#| warning: false
# Vorhersage
system.time(
  progressr::with_progress(
    sby_basefc <- sby_basemodel %>%
      forecast(h = "2 years", level = c(95))
  )
)
```

```{r}
#| echo: true
#| message: false
#| warning: false
require(plotly)

p <- ts_sby %>%
  filter(date >= "2018-12-01") %>%
  autoplot(calls, colour = "red") +
  autolayer(sby_basefc, alpha = 0.3) +
  labs(y = "Anrufe",
       title = "Vorhersage")

ggplotly(p)


```

# Evaluierung

```{r}
aug <- augment(sby_basemodel)

p <- ggplot(aug, aes(x = .innov, fill = .model)) +
  geom_histogram()

ggplotly(p)


```

```{r}
aug %>% features(.innov, ljung_box, lag = 121)
```

```{r}
#| echo: true
#| message: false
#| warning: false


mod <- select(sby_basemodel, stlf) 
gg_tsresiduals(mod)

```

```{r}
sby_basefc %>%
  accuracy(ts_sby,
    list(qs = quantile_score), probs = 0.99
    )
```

```{r}
ggplot(ts_sby, 
       aes(x = pmax(0,calls - 8100), y = sby_need, colour = as.factor(year(date)))) +
         geom_point()

 
```

```{r}
call_pred <- sby_basefc %>%
  filter(.model == "stlf") %>%
  as.tibble() %>%
  select(date, calls = .mean) %>%
  as_tsibble(index = date)
```

```{r}
lm_sby = lm(sby_need ~ pmax(0,calls-8100), data = filter(ts_sby, date <= "2016-12-31"))

#lm_sby = lm(sby_need ~ pmax(0,reg_calls-6400), data = ts_sby)
#plot(lm_sby)
```


```{r}
sby_pred <- predict(lm_sby, call_pred, interval = "prediction")

call_pred$sby <- pmax(0,sby_pred[,1])
```

```{r}
p <- ggplot() +
  geom_line(data = ts_sby, aes(x = date, y = sby_need)) +
  geom_line(data = call_pred, aes(x = date, y = sby, colour = "red"))

ggplotly(p)
  
```

```{r}
#install.packages("fable.prophet")
require(fable.prophet)

# Training
decomp_spec <- decomposition_model(
  STL(calls ~ trend(window = 121) +
          season(period = "1 year", window = 121)),
  RW(season_adjust ~ drift())
)

system.time(
  progressr::with_progress(
    sby_prophet <- ts_sby %>%
      filter(date <= "2018-12-01") %>%
      model(
        #stlf = decomp_spec,
        prophet = prophet(calls ~ growth("linear", changepoint_prior_scale = 0.8) +
                            season(period = 7, order = 15, type = "additive") +
                            season(period = 28, order = 10, type = "additive") +
                            #season(period = 93, order = 10, type = "additive") +
                            #season(period = 181, order = 7, type = "additive") +
                            season(period = "year", order = 5, type = "multiplicative")
                            )
      )
  )
)

sby_prophet %>%
  components() %>%
  autoplot()

sby_prophet %>%
  gg_tsresiduals()

```

```{r}
# Vorhersage
system.time(
  progressr::with_progress(
    sby_prophetfc <- sby_prophet %>%
      forecast(h = "2 years")
  )
)
```



```{r}
#| echo: true
#| message: false
#| warning: false
require(plotly)

p <- ts_sby %>%
  filter(date >= "2018-12-01") %>%
  autoplot(calls, colour = "black") +
  autolayer(sby_prophetfc, alpha = 0.3) +
  labs(y = "Anrufe",
       title = "Vorhersage")

ggplotly(p)


```



```{r}
call_pred <- sby_prophetfc %>%
  filter(.model == "prophet") %>%
  as.tibble() %>%
  mutate(newcalls = pmax(0,.mean-8100)) %>%
  select(date, calls = .mean) %>%
  as_tsibble(index = date)

sby_pred <- predict(lm_sby, call_pred, interval = "prediction")
call_pred$sby <- pmax(0,sby_pred[,1])

p <- ggplot() +
  geom_line(data = ts_sby, aes(x = date, y = sby_need)) +
  geom_line(data = call_pred, aes(x = date, y = sby, colour = "red"))

ggplotly(p)
```


